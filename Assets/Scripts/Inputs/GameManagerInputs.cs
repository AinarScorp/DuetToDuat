//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Inputs/GameManagerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace MainGame.Inputs
{
    public partial class @GameManagerInputs : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameManagerInputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameManagerInputs"",
    ""maps"": [
        {
            ""name"": ""GameManager"",
            ""id"": ""4a5b833e-bb7f-4d45-816e-73cea3554dd3"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""7eb15ace-3759-4e5a-9475-9bd704b21cff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkipIntro"",
                    ""type"": ""Button"",
                    ""id"": ""7b8f4366-448c-4de2-b676-2381a946ce19"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ea1a9e50-ae15-4760-a5b8-f35affc70e4b"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84df4e59-a1a4-4d22-9f04-10b0240c6df7"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73522404-5bb1-494e-85c9-4840d2b1280d"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipIntro"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80027ec6-b3dd-46da-b197-85adadbe5f51"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipIntro"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f901281a-49fd-45ab-925f-5739ba53d57f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipIntro"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9af32097-dc0d-4a62-ad03-a19ae5599730"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipIntro"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce070599-ff8a-4150-b51d-8466b5cf3ee4"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipIntro"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6afcef4-8d49-4f2b-96a1-e7c7bb026207"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipIntro"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // GameManager
            m_GameManager = asset.FindActionMap("GameManager", throwIfNotFound: true);
            m_GameManager_Pause = m_GameManager.FindAction("Pause", throwIfNotFound: true);
            m_GameManager_SkipIntro = m_GameManager.FindAction("SkipIntro", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // GameManager
        private readonly InputActionMap m_GameManager;
        private IGameManagerActions m_GameManagerActionsCallbackInterface;
        private readonly InputAction m_GameManager_Pause;
        private readonly InputAction m_GameManager_SkipIntro;
        public struct GameManagerActions
        {
            private @GameManagerInputs m_Wrapper;
            public GameManagerActions(@GameManagerInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Pause => m_Wrapper.m_GameManager_Pause;
            public InputAction @SkipIntro => m_Wrapper.m_GameManager_SkipIntro;
            public InputActionMap Get() { return m_Wrapper.m_GameManager; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameManagerActions set) { return set.Get(); }
            public void SetCallbacks(IGameManagerActions instance)
            {
                if (m_Wrapper.m_GameManagerActionsCallbackInterface != null)
                {
                    @Pause.started -= m_Wrapper.m_GameManagerActionsCallbackInterface.OnPause;
                    @Pause.performed -= m_Wrapper.m_GameManagerActionsCallbackInterface.OnPause;
                    @Pause.canceled -= m_Wrapper.m_GameManagerActionsCallbackInterface.OnPause;
                    @SkipIntro.started -= m_Wrapper.m_GameManagerActionsCallbackInterface.OnSkipIntro;
                    @SkipIntro.performed -= m_Wrapper.m_GameManagerActionsCallbackInterface.OnSkipIntro;
                    @SkipIntro.canceled -= m_Wrapper.m_GameManagerActionsCallbackInterface.OnSkipIntro;
                }
                m_Wrapper.m_GameManagerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Pause.started += instance.OnPause;
                    @Pause.performed += instance.OnPause;
                    @Pause.canceled += instance.OnPause;
                    @SkipIntro.started += instance.OnSkipIntro;
                    @SkipIntro.performed += instance.OnSkipIntro;
                    @SkipIntro.canceled += instance.OnSkipIntro;
                }
            }
        }
        public GameManagerActions @GameManager => new GameManagerActions(this);
        public interface IGameManagerActions
        {
            void OnPause(InputAction.CallbackContext context);
            void OnSkipIntro(InputAction.CallbackContext context);
        }
    }
}
